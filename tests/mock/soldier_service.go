// Code generated by MockGen. DO NOT EDIT.
// Source: soldier_service.go

// Package mock_service is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/mariojuzar/soldier-magazine/api/entity/model"
	reflect "reflect"
)

// MockSoldierService is a mock of SoldierService interface
type MockSoldierService struct {
	ctrl     *gomock.Controller
	recorder *MockSoldierServiceMockRecorder
}

// MockSoldierServiceMockRecorder is the mock recorder for MockSoldierService
type MockSoldierServiceMockRecorder struct {
	mock *MockSoldierService
}

// NewMockSoldierService creates a new mock instance
func NewMockSoldierService(ctrl *gomock.Controller) *MockSoldierService {
	mock := &MockSoldierService{ctrl: ctrl}
	mock.recorder = &MockSoldierServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSoldierService) EXPECT() *MockSoldierServiceMockRecorder {
	return m.recorder
}

// CreateSoldier mocks base method
func (m *MockSoldierService) CreateSoldier(name string) (model.Soldier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSoldier", name)
	ret0, _ := ret[0].(model.Soldier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSoldier indicates an expected call of CreateSoldier
func (mr *MockSoldierServiceMockRecorder) CreateSoldier(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSoldier", reflect.TypeOf((*MockSoldierService)(nil).CreateSoldier), name)
}

// GetSoldier mocks base method
func (m *MockSoldierService) GetSoldier(id uint) (model.Soldier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSoldier", id)
	ret0, _ := ret[0].(model.Soldier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSoldier indicates an expected call of GetSoldier
func (mr *MockSoldierServiceMockRecorder) GetSoldier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSoldier", reflect.TypeOf((*MockSoldierService)(nil).GetSoldier), id)
}

// UpdateSoldier mocks base method
func (m *MockSoldierService) UpdateSoldier(id uint, name string) (model.Soldier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSoldier", id, name)
	ret0, _ := ret[0].(model.Soldier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSoldier indicates an expected call of UpdateSoldier
func (mr *MockSoldierServiceMockRecorder) UpdateSoldier(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSoldier", reflect.TypeOf((*MockSoldierService)(nil).UpdateSoldier), id, name)
}

// GetAllSoldier mocks base method
func (m *MockSoldierService) GetAllSoldier() ([]model.Soldier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSoldier")
	ret0, _ := ret[0].([]model.Soldier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSoldier indicates an expected call of GetAllSoldier
func (mr *MockSoldierServiceMockRecorder) GetAllSoldier() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSoldier", reflect.TypeOf((*MockSoldierService)(nil).GetAllSoldier))
}

// DeleteSoldier mocks base method
func (m *MockSoldierService) DeleteSoldier(id uint) (model.Soldier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSoldier", id)
	ret0, _ := ret[0].(model.Soldier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSoldier indicates an expected call of DeleteSoldier
func (mr *MockSoldierServiceMockRecorder) DeleteSoldier(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSoldier", reflect.TypeOf((*MockSoldierService)(nil).DeleteSoldier), id)
}
